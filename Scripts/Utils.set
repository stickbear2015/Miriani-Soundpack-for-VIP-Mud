#Var ExtraScriptFiles {Babies^Baby sounds
Cannons^Alerts you of how many shots you have remaining, and plays a sound after the last shot is fired
CGC^The calculator routines for galactic coordinates
Development^Tools for soundpack development
Fishing^Sounds for fishing at Augustus
Games^Sounds for games such as air hockey, skeeball, assault, etc
LaserTag^Sounds for Laser Tag
NIRP^Adds an ETA to NIRP output. For this to work, use the SetSpeed command to set the number of sectors per hour. Alternatively, use the ABOUT command, and the soundpack will attempt to guess the speed factor based on the ship class
Post^Makes it easier to use a text editor for posting messages, by using the POST command
Shenanigans^Sounds for slime dispensers, blades, etc
Spacepace^A little audio game that you can play directly in VIP Mud. After enabling this extra, you can type spacepace help to see instructions.
Socials^Sounds for kitchen appliances, swimming, campfires, swings, showers, punching bags, and much more
Typing^Allows you to type with only one hand, using the number pad}

#Alias LoadExtras {
 #ForAll {%Replace(@ExtraScriptFiles,%CRLF,|)} {
  #If {%Pos(^,%i)>0} {LoadExtra {%Word(%i,^,1)} {%1}}
 }
}
#Alias LoadExtra {
 #Var ExtraTmp1 {LoadExtraScript%1};
 #If {%Defined(@ExtraTmp1)=1} {
  #If {@{@ExtraTmp1}=1} {
   #If {%IfWord(Quiet,%2,|)=0} {#Say {Loading the %1 extra.}};
   #Load {@ScriptPath\Extras\%1.set}
  } {
   #If {%IfWord(NoUnload,%2,|)=0} {
    #If {%IfWord(Quiet,%2,|)=0} {#Say {Unloading the %1 extra.}};
    #UnLoad {@ScriptPath\Extras\%1.set}
   }
  }
 };
 #UnVar ExtraTmp1
}

#Trigger {[*][*][*] * [*][*][*]} {
 #Var MainTmp1 {%Replace(%1,~",)};
 #If {@MainTmp1="Connected"} {
  #GagLine 1 Voice;
  SPConnect 1;
  #Alarm 2 {SPKeepAlive Start Quiet};
  #Abort
 };
 #If {@MainTmp1="Disconnected"} {
  mrplay stop;
  #Var Connected 0;
  #PC 0 Stop;
  #If {@AutoSave=1 and %Defined(ConfManagerMenusLoaded)=1} {ConfSaveAll Quiet};
  #Abort
 };
 #If {@MainTmp1="Redirecting old connection to this port"} {
  #GagLine 1 Voice;
  #Say {Reconnected} NoDisplay;
  #PC 0 Stop;
  #UnAlarm -1;
  SPConnect 1;
  l;
  #Abort
 };
 #If {@MainTmp1="You have entered a starship simulator. To exit, please type END."} {msplay General\Device\MovieStart@Ext;#Abort};
 #If {@MainTmp1=*"The server will be shut down *"} {msplay General\Misc\Announcement@Ext;#Abort};
 #If {@MainTmp1="Auto reconnect in progress..."} {
  #Var AutoLogin 1;
  #Var AutoReconnect 1
 }
}
#Trigger {[#]$[#]*} {
 #Config DisplayCommandsInOutput False;
 #GagLine 1 All;
 #Var oobTmp1 {%Replace(%1,~",)};
 #Var oobTmp1 {%Replace(@oobTmp1,~~,)};
 #If {%Defined(KeepAliveState)=1} {#Var KeepAliveState 1};
 #If {@oobTmp1="soundpack_pong"} {
  #If {%Defined(WhoOriginalHeader)=1} {
   WhoCheck {} {ReadingComplete};
   #UnGagLine;
   #Sub {%Copy(@WhoData,3)};
   #UnVar WhoData
  } {
   #Exec {>#$#soundpack_ping_reply ms};
   #If {%Defined(ShowPong)=1} {
    #UnGagLine;
    #Sub {Pong!};
    MirianiSoundPlay Standard {General\Misc\Pong@Ext} 30 5;
    #UnVar ShowPong
   }
  }
 };
 #If {@oobTmp1="hjelp"} {
  #If {@KeepAliveRespond=1 or @KeepAlive>0} {
   #Exec {>#$#soundpack_ping_reply ms}
  };
  SPKeepAlive Start Quiet Replied
 };
 #If {@oobTmp1=*"soundpack_lag *"} {
  #If {%Defined(ShowPingPongLagReport)=1} {
   #Var ShowPingPongLagReport {%Word(%1, ,2)};
   #Var ShowPingPongLagReport {%Word(@ShowPingPongLagReport,.,1)};
   #UnGagLine;
   #Sub {You have @ShowPingPongLagReport ms of local client lag.};
   #UnVar ShowPingPongLagReport
  }
 };
 #If {@oobTmp1=*"soundpack echo | *"} {
  #If {%Defined(SPPromptAwaitingUserInput)=1} {
   #If {@SPPromptAcceptBlankUserInput=1 or %Length(%1)>17} {
    #Exec {#Alarm 0 {SPPrompt Disable;@SPPromptCallback {%Copy(%1,18)} {@SPPromptCallbackLastArg}}}
   } {
    MirianiSoundPlay Standard General\Misc\Cancel@Ext;
    #Say {Aborted.} NoVoice;
    SPPrompt Disable
   }
  } {
   MirianiSoundPlay Standard General\Misc\Cancel@Ext
  }
 };
 #If {@CommandEcho=1} {#Config DisplayCommandsInOutput True}
}

#Alias ping {
 #Var ShowPong {};
 #Var ShowPingPongLagReport {};
 #Config DisplayCommandsInOutput False;
 MirianiSoundPlay Standard {General\Misc\Ping@Ext} 30 5;
 #Exec {>#$#soundpack_ping};
 #If {@CommandEcho=1} {#Config DisplayCommandsInOutput True}
}
#Alias lag {
 #Exec {>lag%RTrim( %0)};
 #If {%1=""} {
  #Class LagTest Enable;
  #Conf DisplayCommandsInOutput False;
  #Exec {>#$#soundpack_ping};
  #If {@CommandEcho=1} {#Conf DisplayCommandsInOutput True}
 }
}
#Trigger {There is currently an estimated * of server CPU lag and *} {
 #Class LagTest Disable;
 #Var ShowPingPongLagReport {};
 #Sub {There is currently an estimated %1 of server processing lag.}
} {LagTest}
#Alias SPKeepAlive {
 #If {%IsNumber(%1)=1} {
  #If {%1>0} {
   #Var KeepAlive %1;
   #If {%2<>"Quiet"} {#Say {SPKeepAlive is now set to %1 seconds.}};
   SPKeepAlive Start Quiet
  } {
   #Var KeepAlive 0;
   #If {%Defined(KeepAliveState)=1} {#UnVar KeepAliveState};
   #If {%Defined(KeepAliveHandle)=1} {#UnAlarm KeepAliveHandle;#UnVar KeepAliveHandle};
   #If {%2<>"Quiet"} {#Say {SPKeepAlive is now off.}}
  }
 } {
  #If {%1="Start"} {
   #If {@KeepAlive>0} {
    #If {%2<>"Quiet"} {
     #If {%Defined(KeepAliveHandle)=1} {
      #Say {SPKeepAlive restarted.}
     } {
      #Say {SPKeepAlive started.}
     }
    };
    #If {@KeepAlive<10} {
     #Say {Automatically adjusting your SPKeepAlive to 10 seconds, because @KeepAlive is just too short.};
     #Var KeepAlive 10
    };
    #If {%3<>"Replied"} {
     #Var KeepAliveState 0;
     #Config DisplayCommandsInOutput False;
     #Exec {>#$#soundpack_ping};
     #If {@CommandEcho=1} {#Config DisplayCommandsInOutput True}
    };
    #If {%Defined(KeepAliveHandle)=1} {#UnAlarm KeepAliveHandle};
    #Alarm KeepAliveHandle {@KeepAlive} {
     #UnVar KeepAliveHandle;
     #If {@KeepAliveState=0} {
      #Var KeepAliveState 3;
      #If {%Defined(AutoReconnect)=0} {
       #Say {WARNING: The soundpack reports that your connection to the server might be broken!};
       #Say {You can change the soundpack's keep alive settings by typing SPKeepAlive.};
       msplay {LaserTag/NoTargets@Ext}
      }
     } {
      SPKeepAlive Start Quiet
     }
    }
   } {
    #If {%2<>"Quiet"} {
     #Say {First you need to give SPKeepAlive an interval to work with. Please type SPKeepAlive for more information.}
    }
   }
  } {
   #If {@KeepAlive>0} {
    #Say {SPKeepAlive is currently set to @KeepAlive seconds.}
   } {
    #Say {SPKeepAlive is currently off.}
   };
   #Say {You can set the interval of SPKeepAlive by giving it a new amount of seconds, e.g.: SPKeepAlive 90. That would set the interval to one and a half minute.};
   #Say {To turn SPKeepAlive off, set it to 0 seconds.}
  }
 }
}

#Alias MainTrigSwitch {
 #If {%Length(%2)>0} {
  #If {%Defined(ActiveClasses)=0} {#Var ActiveClasses {%2}} {#AddItem ActiveClasses {%2} NoDuplicates}
 };
 #If {%1>0} {
  #If {%Defined(ActiveClasses)=1} {
   #ForAll {@ActiveClasses} {
    #Class {%i} Disable;
    #Exec {#UnVar {%i}}
   };
   #UnVar ActiveClasses
  };
  #Var Main %1;
  #Class Main Enable;
  #Class MainOff Disable
 } {
  #If {%Length(%2)>0} {
   #ForAll {%2} {
    #Class {%i} Enable;
    #Var {%i} {%1}
   }
  };
  #If {%1<0} {#Class Main Disable;#Class MainOff Enable;#Var Main %1}
 }
}
#Alias GetWildcardValues {
 #Var WildcardTmp1 0;
 #Math WildcardTmp2 {%NumWords(%1,*)-1};
 #Var WildcardTmp3 {%2};
 #While {@WildcardTmp1<@WildcardTmp2} {
  #Math WildcardTmp1 {@WildcardTmp1+1};
  #Var WildcardTmp4 {%Word(%1,*,@WildcardTmp1)};
  #Var WildcardTmp5 {%Word(%1,*,@WildcardTmp1+1)};
  #Var {Wildcard@WildcardTmp1} {%Copy(@WildcardTmp3,%Length(@WildcardTmp4)+1)};
  #If {%Length(@WildcardTmp5)>0} {
   #Math WildcardTmp6 {%Pos(@WildcardTmp5,@{Wildcard@WildcardTmp1})-1};
   #If {@WildcardTmp6<0} {
    #Var WildcardTmp6 0;
    #Var {Wildcard@WildcardTmp1} {}
   } {
    #Var {Wildcard@WildcardTmp1} {%Copy(@{Wildcard@WildcardTmp1},1,@WildcardTmp6)}
   }
  } {
   #Var WildcardTmp6 {%Length(@{Wildcard@WildcardTmp1})}
  };
  #Var WildcardTmp3 {%Copy(@WildcardTmp3,%Length(@WildcardTmp4)+@WildcardTmp6+1)}
 }
}

#Alias DisplayPrint {
 #Var DisplayString {%2};
 #Var {Display%{1}IsHidden} {0};
 #If {@{HideDisplay%1}=1} {
  #Var DisplayFilterTmp1 {%Replace(%3,~",~%0x22~%)};
  #Var DisplayFilterTmp1 {%Replace(@DisplayFilterTmp1,~~,~%0x7e~%)};
  #Var DisplayFilterTmp2 {%Replace(@{Display%{1}Filter},~",~%0x22~%)};
  #Var DisplayFilterTmp2 {%Replace(@DisplayFilterTmp2,~~,~%0x7e~%)};
  #If {@DisplayFilterTmp1=*@DisplayFilterTmp2} {
   #GagLine 1 {@{Display%{1}GagType}};
   #Var {Display%{1}IsHidden} {1}
  }
 }
}

#Alias wn {#edit @ChangelogFilePath}
#Alias GagEverything {
 #Var GagEverything {%Eval(NOT @GagEverything)};
 #If {@GagEverything=1} {
  #SetSpeech Incoming Off;
  #Say {Gagging enabled. Type GagEverything, or press control f12 to disable.} VoiceOnly
 } {
  #SetSpeech Incoming On;
  #Say {Gagging Disabled.}
 }
}
#Alias SPConnect {
 #Var Connected 1;
 #If {%1="1"} {
  #If {%Defined(StartupMusicHandle)=1} {
   #PC @StartupMusicHandle Stop;
   #UnVar StartupMusicHandle
  };
  SetRoomSoundVolume
 };
 #Exec {>#$#register_soundpack @SoundpackName | @Version}
}
#Alias SPInfo {
 #If {%IsNumber(%Version)=0} {
  #Say {Warning: You have installed the scripts for VIP Mud 2.0, but you are using VIP Mud 1.1. It is likely that errors will occur unless you install the scripts for VIP Mud 1.1, or upgrade to VIP Mud 2.0.}
 };
 #If {@RequiredSoundsVersion>@SoundsVersion} {
  #Say {Warning: You are not using the most recent Miriani Soundpack Sounds. Certain sounds might not work until you upgrade to version @RequiredSoundsVersion of the sounds folder.}
 };
 #Say {Soundpack version: @Version};
 #Say {Sounds version: @SoundsVersion};
 #If {%IsNumber(%Version)=0} {
  #Say {VIP Mud version: 1.1}
 } {
  #If {%Length(%Version)=6} {
   #Var VipTmp1 {%Left(%Version,1)};
   #If {%Copy(%Version,2,1)<>"0"} {#Var VipTmp1 {@VipTmp1%Copy(%Version,2,1)}};
   #Var VipTmp1 {@VipTmp1.%Copy(%Version,3,1)};
   #If {%Copy(%Version,4,1)<>"0"} {#Var VipTmp1 {@VipTmp1%Copy(%Version,4,1)}};
   #Var VipTmp1 {@VipTmp1.%Copy(%Version,5,1)};
   #If {%Copy(%Version,6,1)<>"0"} {#Var VipTmp1 {@VipTmp1%Copy(%Version,6,1)}};
   #Say {VIP Mud version: @VipTmp1};
   #UnVar VipTmp1
  } {
   #Say {VIP Mud version: %Version}
  }
 };
 #Say {Scripts path: @ScriptPath};
 #Say {Sounds path: @SoundsPath};
 #Say {Themes path: @ThemesPath}
}
#Alias SPTest {
 #Var TestTmp1 {Soundpack Test:};
 #If {%Defined(Version)=1} {
  #Var TestTmp1 {@TestTmp1%{CRLF}+ Soundpack version seems to be @Version.}
 } {
  #Var TestTmp1 {@TestTmp1%{CRLF}- Soundpack version is missing. Try type SPRELOAD to fix this.}
 };
 #If {%Defined(DecimalChar)=1 and %Defined(Connected)=1 and %Defined(GagEverything)=1 and %Defined(Main)=1} {
  #Var TestTmp1 {@TestTmp1%{CRLF}+ The soundpack core seems to be loaded.};
  #If {%Defined(DeclaredVariables)=1 and %Defined(PreservedVariables)=1} {
   #Var TestTmp1 {@TestTmp1%{CRLF}+ The Variables framework seems to be loaded.}
  } {
   #Var TestTmp1 {@TestTmp1%{CRLF}- The Variables framework does not seem to have been loaded. Try type SPRELOAD to fix this.}
  }
 } {
  #Var TestTmp1 {@TestTmp1%{CRLF}- Core variables missing. Aborting the test.}
 };
 #Var TestTmp2 {%{CRLF}-};
 #If {%Pos(@TestTmp2,@TestTmp1)>0} {
  #Var TestTmp1 {@TestTmp1%CRLF  The testing tool detected one or more issues with the soundpack.}
 } {
  #Var TestTmp1 {@TestTmp1%CRLF  The testing tool could not find any issues with the soundpack.}
 };
 #If {%1="copy"} {
  #Clip {@TestTmp1};
  #Say {Soundpack test report has hopefully been copied to the clipboard.}
 } {
  #Say {@TestTmp1}
 };
 #UnVar TestTmp1;
 #UnVar TestTmp2
}
#Alias SPReload {
 #If {%IfWord(Quiet,%1,|)=0} {#Say {Reloading...}};
 #Ignore Key On;
 #Ignore Trigger On;
 #If {@AutoSave=1 and %Defined(ConfManagerMenusLoaded)=1} {ConfSaveAll Quiet};
 #PC 0 Stop;
 #UnAlarm -1;
 #Alarm 0 {
  #Exec {
   #Reload;
   #AddItem SoundpackIsLoading Reloading NoDuplicates;
   #Var Classification {@Classification};
   #Var Connected {@Connected};
   #Var Exits {@Exits};
   #Var Hostile {@Hostile};
   #Var InSpace {@InSpace};
   #Var Light {@Light};
   #Var Outdoors {@Outdoors};
   #Var HistoryLogBuffer {@HistoryLogBuffer};
   #Var HistoryLogInitialization {@HistoryLogInitialization};
   #Var RoomName {@RoomName};
   #Var RoomSound {@RoomSound};
   #Var Powered {@Powered};
   #Var ZoneName {@ZoneName};
   #Var ZoneType {@ZoneType};
   #Load {@ScriptPath\SoundpackLoader.set}
  }
 }
}

#Alias SPPrompt {
 #If {%Length(%3)=0} {
  #If {%Replace(%1,~",)="Disable"} {
   #UnVar SPPromptCaption;
   #UnVar SPPromptOptions;
   #UnVar SPPromptCallback;
   #UnVar SPPromptCallbackLastArg;
   #UnVar SPPromptAwaitingUserInput;
   #UnVar SPPromptAcceptBlankUserInput;
   #Class ShowSPPrompt Disable
  } {
   #Exec {>SPPrompt%RTrim( %0)}
  }
 } {
  #Var SPPromptCaption {%1};
  #If {%Length(@SPPromptCaption)>0} {
   #If {%IfWord(%Right(@SPPromptCaption,1),. : ! ?, )=0} {#Var SPPromptCaption {@SPPromptCaption:}};
   #Say {@SPPromptCaption} NoDisplay
  };
  #If {%Right(%2,2)=%CRLF} {#Var SPPromptOptions {%Copy(%2,1,%Length(%2)-2)}} {#Var SPPromptOptions {%2}};
  #If {%Left(@SPPromptOptions,2)=%CRLF} {#Var SPPromptOptions {%Copy(@SPPromptOptions,3)}};
  #If {%Pos(:,%3)=1} {
   #Var SPPromptAcceptBlankUserInput 1;
   #Var SPPromptCallback {%Copy(%3,2)}
  } {
   #Var SPPromptAcceptBlankUserInput 0;
   #Var SPPromptCallback {%3}
  };
  #Var SPPromptCallbackLastArg {%4};
  #UnVar SPPromptTmp1;
  #UnVar SPPromptAwaitingUserInput;
  #Class ShowSPPrompt Enable;
  #Config DisplayCommandsInOutput False;
  #Exec { };
  #Exec {>secho};
  #If {@CommandEcho=1} {#Config DisplayCommandsInOutput True}
 }
}
#Trigger {What would you like to be repeated back to you using soundpack echo?} {
 #Class ShowSPPrompt Disable;
 #If {%Defined(SPPromptCaption)=0} {
  SPPrompt Disable
 } {
  #Var SPPromptAwaitingUserInput 1;
  #If {%Length(@SPPromptOptions)>0} {
   #If {%Length(@SPPromptCaption)>0} {#Say {  @SPPromptCaption} NoVoice};
   #Sub {@SPPromptOptions}
  } {
   #GagLine 1 Voice;
   #Sub {@SPPromptCaption}
  }
 }
} {ShowSPPrompt}

#Trigger {Your soundpack appears to be out of date! You're using version '*', but the most recent version is '*'. You can download the most recent version from: *} {
 #Var NewVersion {%2};
 #Var NewMajorVersion {%Word(@NewVersion,.,1)};
 #Var NewMinorVersion {%Word(@NewVersion,.,2)};
 #Var NewPatchVersion {%Word(@NewVersion,.,3)};
 #If {@NewMajorVersion>@MajorVersion or @NewMinorVersion>@MinorVersion or @NewPatchVersion>@PatchVersion} {
  #If {@AlertOnUpdate=1 or @NewMajorVersion>@MajorVersion} {
   #If {@NewMajorVersion>@MajorVersion} {
    msplay {General\Misc\UpdateAlert@Ext}
   } {
    msplay {General\Misc\MOTD@Ext}
   };
   #If {@NewPatchVersion>@PatchVersion} {#Var UpdateTmp1 {There's a patch update available for your soundpack.}};
   #If {@NewMinorVersion>@MinorVersion} {#Var UpdateTmp1 {There is a minor update available for your soundpack.}};
   #If {@NewMajorVersion>@MajorVersion} {#Var UpdateTmp1 {There is a major update available for your soundpack!}};
   #Var UpdateTmp1 {*** @UpdateTmp1 ***
If you're running the soundpack from the actively maintained shared folder in Dropbox, then you should make sure your Dropbox is up to date and then type SPRELOAD or reconnect to Miriani. If not, you should consider downloading the latest version from:
%3
The latest version is @NewVersion.
You are currently using version @Version of the @SoundpackName.};
   #If {@NewMajorVersion=@MajorVersion} {#Var UpdateTmp1 {@UpdateTmp1%{CRLF}If you don't want to see these update alerts in the future, then you can disable soundpack update notifications in conf gen.}};
   #Sub {@UpdateTmp1};
   #UnVar UpdateTmp1
  } {
   #GagLine 1 All
  }
 } {
  #GagLine 1 All
 };
 #UnVar NewMajorVersion;
 #UnVar NewMinorVersion;
 #UnVar NewPatchVersion;
 #UnVar NewVersion
} {Main}
#Trigger {Your soundpack has been updated to version '*'! You can download it here: *} {
 #Var NewVersion {%1};
 #Var NewMajorVersion {%Word(@NewVersion,.,1)};
 #Var NewMinorVersion {%Word(@NewVersion,.,2)};
 #Var NewPatchVersion {%Word(@NewVersion,.,3)};
 #If {@NewMajorVersion>@MajorVersion or @NewMinorVersion>@MinorVersion or @NewPatchVersion>@PatchVersion} {
  #If {@AlertOnUpdate=1 or @NewMajorVersion>@MajorVersion} {
   #If {@NewMajorVersion>@MajorVersion} {
    msplay {General\Misc\UpdateAlert@Ext}
   } {
    msplay {General\Misc\MOTD@Ext}
   };
   #If {@NewPatchVersion>@PatchVersion} {#Var UpdateTmp1 {There's a patch update available for your soundpack.}};
   #If {@NewMinorVersion>@MinorVersion} {#Var UpdateTmp1 {There is a minor update available for your soundpack.}};
   #If {@NewMajorVersion>@MajorVersion} {#Var UpdateTmp1 {There is a major update available for your soundpack!}};
   #Var UpdateTmp1 {*** @UpdateTmp1 ***
If you're running the soundpack from the actively maintained shared folder in Dropbox, then you should make sure your Dropbox is up to date and then type SPRELOAD or reconnect to Miriani. If not, you should consider downloading the latest version from:
%2
The latest version is @NewVersion.
You are currently using version @Version of the @SoundpackName.};
   #If {@NewMajorVersion=@MajorVersion} {#Var UpdateTmp1 {@UpdateTmp1%{CRLF}If you don't want to see these update alerts in the future, then you can disable soundpack update notifications in conf gen.}};
   #Sub {@UpdateTmp1};
   #UnVar UpdateTmp1
  } {
   #GagLine 1 All
  }
 } {
  #GagLine 1 All
 };
 #UnVar NewMajorVersion;
 #UnVar NewMinorVersion;
 #UnVar NewPatchVersion;
 #UnVar NewVersion
} {Main}
#Alias soundpack {
 #Config DisplayCommandsInOutput False;
 #If {%1="register"} {#Exec {>#$#register_soundpack @SoundpackName | @Version}};
 #If {%1="unregister"} {#Exec {>#$#unregister_soundpack}};
 #If {%1="version"} {#Exec {>#$#soundpack_version_query @SoundpackName}};
 #If {@CommandEcho=1} {#Config DisplayCommandsInOutput True};
 #If {%1="reload"} {
  #Say {Reloading the soundpack... Please remain calm.};
  SPReload 1
 }
}

#If {%Defined(DeclaredVariables)=0} {#Var DeclaredVariables {}}
#If {%Defined(PreservedVariables)=0} {#Var PreservedVariables {}}

#Alias MakeVarName {
 #If {%Length(%1)=0} {#Var VarNameTmp2 {Tmp}} {#Var VarNameTmp2 {%1}};
 #If {%Length(%2)=0} {#Var VarNameTmp2 {VarName}} {#Var VarNameTmp2 {%2}};
 #Var VarNameTmp1 {%Replace(%1,~",)};
 #Var VarNameTmp1 {%Replace(@VarNameTmp1,~~,)};
 #Var VarNameTmp1 {%Replace(@VarNameTmp1, ,0)};
 #Var {@VarNameTmp2} {};
 #Var VarNameTmp3 0;
 #Var VarNameTmp4 {%Length(@VarNameTmp1)};
 #While {@VarNameTmp3<@VarNameTmp4} {
  #Math VarNameTmp3 {@VarNameTmp3+1};
  #If {%Copy(@VarNameTmp1,@VarNameTmp3,1)=*"[a-z0-9]"} {#Var {@VarNameTmp2} {@{@VarNameTmp2}%Copy(@VarNameTmp1,@VarNameTmp3,1)}}
 };
 #Var {@{@VarNameTmp2}} {};
 #UnVar VarNameTmp1;
 #UnVar VarNameTmp2;
 #UnVar VarNameTmp3;
 #UnVar VarNameTmp4
}
#Alias PreserveVariable {
 #If {%IfWord(%1,@PreservedVariables,|)=0} {#Var PreservedVariables {@PreservedVariables|%1}}
}
#Alias SetPreservedVariable {
 #If {%IfWord(%1,@PreservedVariables,|)=0} {#Var PreservedVariables {@PreservedVariables|%1}};
 #Var {%1} {%2}
}
#Alias UnsetPreservedVariables {
 #Var VarTmp1 {};
 #ForAll {@PreservedVariables} {
  #If {%Length(%i)>0} {
   #If {%i=*%1} {
    #Exec {#UnVar {%i}}
   } {
    #Var VarTmp1 {@VarTmp1|%i}
   }
  }
 };
 #Var PreservedVariables {@VarTmp1};
 #UnVar VarTmp1
}
#Alias dnd {
 #If {%Length(%1)>0} {
  #Var Silent {%IfWord(%1,on 1 enable enabled, )}
 } {
  #Var Silent {%Eval(Not @Silent)}
 };
 #Exec {#Alarm 0 {
  MasterMute {@Silent} Quiet;
  Speech {%If(@Silent=1,off,on)} Quiet;
  #If {%IfWord(Quiet,%2,|)=0} {
   #Say {%If(@Silent=1,Enabled,Disabled) Do Not Disturb.}
  }
 }}
}
#Alias Speech {
 #If {%1="stop"} {
  #If {@UseSpeechInterrupts=1 and @GagEverything=0} {#SetSpeech Incoming Stop}
 };
 #If {%IfWord(%1,on off, )=1} {
  #SetSpeech Incoming {%1};
  #SetSpeech VoiceOnly {%1};
  #If {%IfWord(Quiet,%2,|)=0} {#Say {Speech %Proper(%1).} VoiceOnly}
 };
 #If {%1="set"} {
  #If {%IfWord(%2,None|ScreenReader|Sapi,|)=1} {#Var SpeechTmp1 {%2}} {#Var SpeechTmp1 {ScreenReader}};
  #If {@SpeechTmp1="Sapi"} {
   #SetSpeech Incoming Sapi @SAPIVoice @SAPIVolume @SAPIRate
  } {
   #SetSpeech Incoming {@SpeechTmp1}
  };
  #If {%4<>1} {#Say {Speech Type set to @SpeechTmp1.}};
  #If {%IfWord(%3,None|ScreenReader|Sapi,|)=1} {
   #If {%3="Sapi"} {
    #SetSpeech VoiceOnly Sapi @SAPIVoice @SAPIVolume @SAPIRate
   } {
    #SetSpeech VoiceOnly {%3}
   };
   #If {%4<>1} {#Say {Speech Type for User Specifyable Voice is now set to %3.}}
  };
  #UnVar SpeechTmp1
 }
}
#Alias DontStopSpeaking {
 #If {@UseSpeechInterrupts=1} {
  speech stop;
  #Var DontStopSpeaking 1
 }
}
#Alias BigAdd {
 #Var BigAddInt {%Word(%1,.,1)};
 #Var BigAddInt {%Replace(@BigAddInt,~,,|)};
 #Var BigAddInt {%ReverseList(@BigAddInt)};
 #Var BigAddTmpInt {%Word(%2,.,1)};
 #Var BigAddTmpInt {%Replace(@BigAddTmpInt,~,,|)};
 #Var BigAddTmpInt {%ReverseList(@BigAddTmpInt)};
 #Math BigAddTmp1 {%Left(%Word(%1,.,2),2)+%Left(%Word(%2,.,2),2)};
 #If {@BigAddTmp1>99} {
  #Var BigAddCarry 1;
  #Math BigAddTmp1 {@BigAddTmp1-100}
 } {
  #Var BigAddCarry 0
 };
 #Var BigAddResult {@BigAddTmp1};
 #Var BigAddSep {.};
 #Exec {#%Max(%NumWords(@BigAddInt,|),%NumWords(@BigAddTmpInt,|)) {
  #Var BigAddTmp1 {~%If(~%i>%NumWords(@BigAddInt,|),0,~%Word(~@BigAddInt,|,~%i))};
  #Var BigAddTmp2 {~%If(~%i>%NumWords(@BigAddTmpInt,|),0,~%Word(~@BigAddTmpInt,|,~%i))};
  #Math BigAddTmp3 {~@BigAddTmp1+~@BigAddTmp2+~@BigAddCarry};
  #If {~@BigAddTmp3>999} {
   #Var BigAddCarry 1;
   #Math BigAddTmp3 {~@BigAddTmp3-1000}
  } {
   #Var BigAddCarry 0
  };
  #While {~%Length(~@BigAddTmp3)<3} {#Var BigAddTmp3 {0~@BigAddTmp3}};
  #Var BigAddResult {~@{BigAddTmp3}~@{BigAddSep}~@BigAddResult};
  #Var BigAddSep {,}
 }};
 #If {@BigAddCarry=1} {#Var BigAddResult {1@BigAddSep@BigAddResult}};
 #While {%Left(@BigAddResult,1)=0} {#Var BigAddResult {%Copy(@BigAddResult,2,%Eval(%Length(@BigAddResult)-1))}};
 #ForAll {Int|Carry|Sep|Tmp1|Tmp2|Tmp3|TmpInt} {#UnVar {BigAdd%i}}
}

#Alias who {
 #Class StartReadingWhoList Disable;
 #Class ReadWhoList Disable;
 #Exec {who%RTrim( %0)}
} {StartReadingWhoList}
#Alias whoc {#Exec {whocheck%RTrim( %0)}}
#Alias WhoCheck {
 #If {%1="" and %2="ReadingComplete"} {
  #Class ReadWhoList Disable;
  #Var WhoTmp2 {, };
  #Var WhoData {};
  #If {%Defined(LastConnectedPlayers)=1} {
   #Var DisconnectedPlayers {};
   #Var NewConnectedPlayers {};
   #ForAll {@ConnectedPlayers} {
    #If {%IfWord(%i,@LastConnectedPlayers,|)=0} {
     #If {%Length(@NewConnectedPlayers)=0} {
      #Var NewConnectedPlayers {%i}
     } {
      #AddItem NewConnectedPlayers {%i}
     }
    }
   };
   #ForAll {@LastConnectedPlayers} {
    #If {%IfWord(%i,@ConnectedPlayers,|)=0} {
     #If {%Length(@DisconnectedPlayers)=0} {
      #Var DisconnectedPlayers {%i}
     } {
      #AddItem DisconnectedPlayers {%i}
     }
    }
   };
   #If {%Length(@NewConnectedPlayers)>0} {
    #If {%NumWords(@NewConnectedPlayers,|)=1} {
     #Var WhoData {@WhoData%{CRLF}There is 1 player who has connected since last check:}
    } {
     #Var WhoData {@WhoData%{CRLF}There are %NumWords(@NewConnectedPlayers,|) players who have connected since last check:}
    };
    #Var WhoTmp1 {%Sort(@NewConnectedPlayers,0)};
    #Var WhoData {@WhoData%{CRLF}%Replace(@WhoTmp1,|,@WhoTmp2).}
   } {
    #Var WhoData {@WhoData%{CRLF}No players have connected since last check.}
   };
   #If {%Length(@DisconnectedPlayers)>0} {
    #If {%NumWords(@DisconnectedPlayers,|)=1} {
     #Var WhoData {@WhoData%{CRLF}There is 1 player who has disconnected since last check:}
    } {
     #Var WhoData {@WhoData%{CRLF}There are %NumWords(@DisconnectedPlayers,|) players who have disconnected since last check:}
    };
    #Var WhoTmp1 {%Sort(@DisconnectedPlayers,0)};
    #Var WhoData {@WhoData%{CRLF}%Replace(@WhoTmp1,|,@WhoTmp2).}
   } {
    #Var WhoData {@WhoData%{CRLF}No players have disconnected since last check.}
   };
   #UnVar DisconnectedPlayers;
   #UnVar NewConnectedPlayers
  };
  #Var WhoTmp1 {%Sort(@ConnectedPlayers,0)};
  #Var WhoData {@WhoData%{CRLF}@WhoOriginalHeader%{CRLF}%Replace(@WhoTmp1,|,@WhoTmp2).};
  #Var LastConnectedPlayers {@ConnectedPlayers};
  #UnVar ConnectedPlayers;
  #UnVar WhoOriginalHeader;
  #UnVar WhoTmp1;
  #UnVar WhoTmp2
 } {
  #Class StartReadingWhoList Enable;
  #Exec {>who};
  #If {%Defined(LastConnectedPlayers)=1} {
   #Say {Checking...} NoDisplay
  } {
   #Say {First check.} NoDisplay
  };
  #Alarm {0@{DecimalChar}2} {
   #Conf DisplayCommandsInOutput False;
   #Exec {>#$#soundpack_ping};
   #If {@CommandEcho=1} {#Conf DisplayCommandsInOutput True}
  }
 }
}

#Trigger {There are * players connected, * of whom have been active recently:} {
 #GagLine 1 All;
 #Var WhoOriginalHeader {%0};
 #Var ConnectedPlayers {};
 #Class ReadWhoList Enable;
 #Class StartReadingWhoList Disable
} {Main|StartReadingWhoList}
#Trigger {* (*} {
 #GagLine 1 All;
 #ForAll {%Replace(%0,~),|)} {
  #If {%Pos(~(,%i)>0} {
   #Var WhoTmp1 {%Word(%i,~(,1)};
   #If {%NumWords(@WhoTmp1,])>1} {
    #Var WhoTmp1 {%Word(@WhoTmp1,],2)}
   };
   #Var WhoTmp1 {%Trim(@WhoTmp1)};
   #If {%Left(@WhoTmp1,1)="*" or %Left(@WhoTmp1,1)="^"} {
    #Var WhoTmp1 {%Copy(@WhoTmp1,2)}
   };
   #If {%Length(@ConnectedPlayers)=0} {#Var ConnectedPlayers {@WhoTmp1}} {#AddItem ConnectedPlayers {@WhoTmp1}}
  }
 }
} {ReadWhoList}
#Trigger {* - Out of *} {#GagLine 1 All} {ReadWhoList}
